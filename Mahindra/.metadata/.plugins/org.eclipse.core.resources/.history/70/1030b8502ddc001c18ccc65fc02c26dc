package personal.learning.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.RepresentationModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import personal.learning.configuration.DBConfiguration;
import personal.learning.custom.response.ErrorPayload;
import personal.learning.custom.response.SuccessPayload;
import personal.learning.model.entity.Brand;
import personal.learning.services.BrandService;

@Controller
@RequestMapping("/mahindra")
public class MahindraController extends RepresentationModel<MahindraController> {
	
	private static final Logger logger = LoggerFactory.getLogger(MahindraController.class);
	
	AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DBConfiguration.class);
	BrandService brandService = context.getBean("bService", BrandService.class);

	@RequestMapping(method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE})
	@ResponseBody
	public ResponseEntity getDevices() {
//		List<Brand> brandList = brandService.getAllBrands();
//		
//		for(Brand brand : brandList) {
//			Link selfLink = WebMvcLinkBuilder.linkTo(BrandController.class).slash(brand.getBrandId()).withSelfRel();
//			List<Link> listOflinks = new ArrayList<Link>();
//			listOflinks.add(selfLink);
//			brand.setListOflinks(listOflinks);
//		}
//		return ResponseEntity.status(HttpStatus.OK).body(brandList);
		
	}
}
